#BlueJ class context
comment0.target=Equation
comment0.text=\r\n\ Write\ a\ description\ of\ class\ FunctionHandler\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=eq
comment1.target=Equation(java.lang.String)
comment1.text=\r\n\ The\ Initializer,\ parses\ the\ equation\ for\ future\ solving.\r\n\ @param\ eq\ The\ equation\ in\ string\ form\ to\ be\ parsed.\r\n
comment2.params=
comment2.target=double\ evaluate()
comment2.text=\r\n\ Simple\ Evaluation\ Method\ for\ no\ inputs.\ All\ variables\ will\ be\ assumed\ to\ be\ equal\ to\ 1\r\n\ @return\ Returns\ a\ double\ of\ what\ the\ equation\ evaluates\ to.\r\n
comment3.params=args\ values
comment3.target=double\ evaluate(java.lang.String[],\ double[])
comment3.text=\r\n\ Evaluation\ method\ that\ allows\ for\ basic\ variable\ input.\ All\ variables\ undeclared\ will\ be\ a\ 1\r\n\ @param\ args\ Array\ of\ all\ variables\ you\ are\ declaring.\ Should\ be\ strings\ of\ length\ 1.\r\n\ @param\ values\ Array\ of\ all\ values\ for\ variables\ you\ are\ declaring.\ Should\ be\ in\ the\ same\ order\ of\ the\ args\ array.\r\n
comment4.params=val\ i\ varValues
comment4.target=java.lang.String[]\ calculateOperation(double,\ int,\ double[])
comment4.text=\r\n\ Calculates\ an\ individual\ operation\ allowing\ for\ recursion.\ \r\n\ @param\ val\ the\ current\ value\r\n\ @param\ i\ the\ index\ of\ the\ operator\ to\ be\ applied\r\n\ @param\ varValues\ all\ values\ of\ variables\ int\ the\ variables\ list.\ Will\ break\ if\ this\ is\ shorter\ than.\r\n
comment5.params=
comment5.target=java.util.List\ getVariables()
numComments=6
