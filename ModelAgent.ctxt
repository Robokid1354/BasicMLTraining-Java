#BlueJ class context
comment0.target=ModelAgent
comment0.text=\r\n\ Write\ a\ description\ of\ class\ NeuralNet\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=c\ r\ i\ o\ learn\ iActFunc\ iDerFunc
comment1.target=ModelAgent(int,\ int,\ int,\ int,\ double,\ Equation,\ Equation)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Model\ Agent\r\n\ Creates\ brain\ randomly\ at\ set\ size\r\n\ @param\ iActFunc\ x\ should\ be\ variable\ for\ the\ neuron\ output.\ e\ should\ be\ variable\ for\ Math.E\r\n\ @param\ iDerFunc\ x\ should\ be\ the\ output\ of\ the\ neuron\ to\ derive.\r\n
comment10.params=input\ layerIn
comment10.target=double[]\ checkInputs(double[],\ double[][])
comment11.params=tActivate\ active
comment11.target=double[]\ activate(double[],\ Equation)
comment12.params=vector\ matrix
comment12.target=double[]\ multiplyV(double[],\ double[][])
comment12.text=\r\n\ \ \ \ private\ double[]\ derive(double[]\ tDerive)\ {\r\n\ \ \ \ \ \ \ \ double[]\ fDerive\ \=\ new\ double[tDerive.length];\r\n\ \ \ \ \ \ \ \ for\ (int\ i\ \=\ 0;\ i\ <\ tDerive.length;\ i++)\r\n\ \ \ \ \ \ \ \ \ \ \ \ fDerive[i]\ \=\ derFunc.evaluate(new\ String[]{"e","x"},new\ double[]{Math.E,tDerive[i]});\r\n\ \ \ \ \ \ \ \ return\ fDerive;\r\n\ \ \ \ }\r\n
comment13.params=modelArray
comment13.target=double[][][]\ initializeWithSize(double[][][])
comment2.params=c\ r\ i\ o\ learn\ iActFunc\ iDerFunc\ oActFunc\ oDerFunc
comment2.target=ModelAgent(int,\ int,\ int,\ int,\ double,\ Equation,\ Equation,\ Equation,\ Equation)
comment3.params=
comment3.target=void\ createBrain()
comment3.text=\r\n\ Creates\ a\ randomly\ initialized\ brain\ of\ default\ weights\ for\ the\ neural\ net\r\n
comment4.params=
comment4.target=double[][][]\ checkBrain()
comment5.params=trnInput\ trnOut
comment5.target=void\ loss(double[][],\ double[][])
comment6.params=trnInput\ trnOut\ iterations
comment6.target=void\ train(double[][],\ double[][],\ int)
comment6.text=\r\n\ Trains\ the\ Agent\ on\ given\ inputs\ and\ outputs\ for\ a\ number\ of\ iterations.\r\n\ @param\ trnInput\ array\ of\ training\ inputs.\ trnInput.length\ should\ \=\ trnOut.length\r\n\ @param\ trnOut\ array\ of\ training\ outputs.\ trnInput.length\ should\ \=\ trnOut.length\r\n\ @param\ iterations\ the\ number\ of\ iterations\ to\ train\ the\ Agent\ for.\r\n
comment7.params=weightChange
comment7.target=void\ updateWeights(double[][][])
comment8.params=layerIn\ exOut\ weightChange
comment8.target=void\ backPropagate(double[][],\ double[],\ double[][][])
comment9.params=input
comment9.target=double[]\ checkInputs(double[])
numComments=14
